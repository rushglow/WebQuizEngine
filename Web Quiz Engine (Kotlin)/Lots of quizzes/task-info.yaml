type: edu
files:
  - name: src/engine/WebQuizEngine.kt
    visible: true
    text: |
      package engine
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      import org.springframework.web.bind.annotation.GetMapping
      import org.springframework.web.bind.annotation.PostMapping
      import org.springframework.web.bind.annotation.RequestMapping
      import org.springframework.web.bind.annotation.RequestParam
      import org.springframework.web.bind.annotation.RestController
      
      @SpringBootApplication
      class WebQuizEngine
      
      fun main(args: Array<String>) {
          runApplication<WebQuizEngine>(*args)
      
          @RestController
          @RequestMapping("/api")
          class Controller {
              private val answers = listOf(
                  Answers(true, "Congratulations, you're right!"),
                  Answers(false, "Wrong answer! Please, try again.")
              )
              private val questionsList = listOf(
                  Questions(
                      "The Java Logo",
                      "What is depicted on the Java logo?",
                      mutableListOf("Robot", "Tea leaf", "Cup of coffee", "Bug")
                  )
              )
              private val answersList = listOf(2)
      
      
              @GetMapping("/quiz")
              fun getQuestion(): Questions {
                  return questionsList[0]
              }
      
              @PostMapping("/quiz")
              fun postQuestion(@RequestParam answer: Int): Answers {
                  return if (answer == answersList[0]) {
                      answers[0]
                  } else {
                      answers[1]
                  }
              }
      
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      server.port=8889
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
    learner_created: false
  - name: src/engine/Controller.kt
    visible: true
    text: |-
      package engine
      
      import org.springframework.web.bind.annotation.*
      
      @RestController
      @RequestMapping("/api")
      class TransferController {
          private val answers = listOf<Answers>(
              Answers(true, "Congratulations, you're right!"),
              Answers(false, "Wrong answer! Please, try again.")
          )
          private val questionsList = listOf<Questions>(
              Questions(
                  "The Java Logo",
                  "What is depicted on the Java logo?",
                  mutableListOf("Robot", "Tea leaf", "Cup of coffee", "Bug")
              )
          )
          private val answersList = listOf<Int>(2)
      
          @GetMapping("/quiz")
          fun getQuestion(): Questions {
              return questionsList[0]
          }
      
          @PostMapping("/quiz")
          fun postQuestion(@RequestParam answer: Int): Answers {
              if (answer == answersList[0]) {
                  return answers[0]
              } else {
                  return answers[1]
              }
          }
      
      }
    learner_created: false
  - name: test/WebQuizEngineTest.java
    visible: false
    text: |
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.Map;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class WebQuizEngineTest extends SpringTest {
          static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                      resp.getRequest().getMethod() + " " +
                          resp.getRequest().getLocalUri() +
                          " should respond with status code " + status + ", " +
                          "responded: " + resp.getStatusCode() + "\n\n" +
                          "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          private static int quizId1 = 0;
          private static int quizId2 = 0;
      
          private static String quiz1 =
              "{\n" +
                  "  \"title\": \"The Java Logo\",\n" +
                  "  \"text\": \"What is depicted on the Java logo?\",\n" +
                  "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                  "  \"answer\": 2\n" +
                  "}";
      
          private static String quiz2 =
              "{\n" +
                  "  \"title\": \"The Ultimate Question\",\n" +
                  "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                  "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                  "  \"answer\": 1\n" +
                  "}";
      
          @DynamicTestingMethod
          public DynamicTesting[] dt = new DynamicTesting[]{
              () -> testAllQuizzes(0),
      
              () -> testCreateQuiz(1),
              () -> testQuizExists(1),
              () -> testQuizNotExists(1),
      
              () -> testAllQuizzes(1),
      
              () -> testCreateQuiz(2),
              () -> testQuizExists(2),
              () -> testQuizNotExists(2),
      
              () -> testAllQuizzes(2),
      
              () -> checkQuizSuccess(quizId1, "0", false),
              () -> checkQuizSuccess(quizId1, "1", false),
              () -> checkQuizSuccess(quizId1, "2", true),
              () -> checkQuizSuccess(quizId1, "3", false),
      
              () -> checkQuizSuccess(quizId2, "0", false),
              () -> checkQuizSuccess(quizId2, "1", true),
              () -> checkQuizSuccess(quizId2, "2", false),
              () -> checkQuizSuccess(quizId2, "3", false),
          };
      
          private CheckResult testCreateQuiz(int quizNum) {
              String url = "/api/quizzes";
              HttpResponse resp = post(url, quizNum == 1 ? quiz1 : quiz2).send();
      
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("id", isInteger(i -> {
                          if (quizNum == 1) {
                              quizId1 = i;
                          } else {
                              quizId2 = i;
                          }
                          return true;
                      }))
                      .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult testQuizExists(int quizNum) {
              int quizId = quizNum == 1 ? quizId1 : quizId2;
              String quiz = quizNum == 1 ? quiz1 : quiz2;
      
              String url = "/api/quizzes/" + quizId;
      
              HttpResponse resp = get(url).send();
              checkStatusCode(resp, 200);
      
              JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
              rightQuiz.remove("answer");
              rightQuiz.addProperty("id", quizId);
      
              expect(getPrettyJson(rightQuiz)).asJson().check(
                  isObject()
                      .value("id", quizId)
                      .value("title", isString())
                      .value("text", isString())
                      .value("options", isArray(any()))
              );
      
              JsonElement json = resp.getJson();
      
              CheckResult wrongResponse = CheckResult.wrong(
                  "The quiz sent to the program looked like this:\n" +
                      getPrettyJson(rightQuiz) + "\n\n" +
                      "But the received quiz looks like that:\n" +
                      getPrettyJson(json)
              );
      
              if (!json.isJsonObject()) {
                  return wrongResponse;
              }
      
              JsonObject obj = json.getAsJsonObject();
      
              if (!rightQuiz.equals(obj)) {
                  return wrongResponse;
              }
      
              return CheckResult.correct();
          }
      
          private CheckResult testQuizNotExists(int quizNum) {
              int quizId = quizNum == 1 ? quizId1 : quizId2;
      
              String url = "/api/quizzes/" + (quizId + 125);
      
              HttpResponse resp = get(url).send();
              checkStatusCode(resp, 404);
      
              return CheckResult.correct();
          }
      
          private CheckResult testAllQuizzes(int count) {
              String url = "/api/quizzes";
              HttpResponse resp = get(url).send();
      
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isArray(count, isObject().anyOtherValues())
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
              String url = "/api/quizzes/" + quizNum + "/solve";
      
              HttpRequest req = post(url, Map.of("answer", answerSent));
              HttpResponse resp = req.send();
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("success", shouldResponse)
                      .value("feedback", isString(s -> !s.isBlank(), "should not be blank"))
              );
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/engine/Quizzes.kt
    visible: true
    text: |-
      package engine
      
      class Quizzes(
          val title: String,
          val text: String,
          val options: List<String>,
          val answer: Int
      )
      
      class QuizzesResponse(
          val id: Int,
          val title: String,
          val text: String,
          val options: List<String>
      )
      
      class AnswerResponse(
          val success: Boolean,
          val feedback: String
      )
    learner_created: true
  - name: src/engine/CustomException.kt
    visible: true
    text: |-
      package engine
      
      import org.springframework.http.HttpStatus
      import org.springframework.http.ResponseEntity
      import org.springframework.web.bind.annotation.ControllerAdvice
      import org.springframework.web.bind.annotation.ExceptionHandler
      import org.springframework.web.context.request.WebRequest
      import java.time.LocalDateTime
      
      class BadQuizException(message: String): RuntimeException(message)
      
      class CustomErrorMessage(
          val statusCode:Int,
          val timestamp: LocalDateTime,
          val message: String?,
          val description: String
      )
      
      @ControllerAdvice
      class ControllerExceptionHandler {
          @ExceptionHandler(BadQuizException::class)
          fun handleQuizNotFound(e: BadQuizException, request: WebRequest): ResponseEntity<CustomErrorMessage> {
              val body = CustomErrorMessage(
                  HttpStatus.NOT_FOUND.value(),
                  LocalDateTime.now(),
                  e.message,
                  request.getDescription(false)
              )
              return ResponseEntity<CustomErrorMessage>(body, HttpStatus.NOT_FOUND)
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/24906#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 16 Mar 2024 13:51:01 UTC"
record: 2
