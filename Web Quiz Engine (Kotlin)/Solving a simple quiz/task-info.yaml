type: edu
files:
  - name: src/engine/WebQuizEngine.kt
    visible: true
    text: |
      package engine
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      
      @SpringBootApplication
      class WebQuizEngine
      
      fun main(args: Array<String>) {
          runApplication<WebQuizEngine>(*args)
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      server.port=8889
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: test/WebQuizEngineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonStringBuilder;
      
      import java.util.Map;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class WebQuizEngineTest extends SpringTest {
          static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                      resp.getRequest().getMethod() + " " +
                          resp.getRequest().getLocalUri() +
                          " should respond with status code " + status + ", " +
                          "responded: " + resp.getStatusCode() + "\n\n" +
                          "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          @DynamicTestingMethod
          public DynamicTesting[] dt = new DynamicTesting[] {
              this::checkQuizReceived,
              () -> checkQuizSuccess("2", true),
              () -> checkQuizSuccess("1", false)
          };
      
          private CheckResult checkQuizReceived() {
              String url = "/api/quiz";
      
              HttpResponse resp = get(url).send();
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("title", isNotBlankString())
                      .value("text", isNotBlankString())
                      .value("options", isArray(4, isNotBlankString()))
              );
      
              return CheckResult.correct();
          }
      
          private CheckResult checkQuizSuccess(String answerSent, boolean shouldResponse) {
              String url = "/api/quiz";
      
              HttpRequest req = post(url, Map.of("answer", answerSent));
              HttpResponse resp = req.send();
      
              checkStatusCode(resp, 200);
      
              expect(resp.getContent()).asJson().check(
                  isObject()
                      .value("success", shouldResponse)
                      .value("feedback", isNotBlankString())
              );
      
              return CheckResult.correct();
          }
      
          private static JsonStringBuilder isNotBlankString() {
              return isString(s -> !s.isBlank(), "should not be blank");
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
    learner_created: false
  - name: src/engine/Controller.kt
    visible: true
    learner_created: true
  - name: src/engine/CustomException.kt
    visible: true
    learner_created: true
  - name: src/engine/Quizzes.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/24905#comment
status: Solved
record: 1
